[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Transaction AtomicArray.writeConflict(Transaction)` writes to field `this.version` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":129,"column":-1,"procedure":"TinyTM.AtomicArray.writeConflict(TinyTM.Transaction):TinyTM.Transaction","procedure_start_line":0,"file":"src/TinyTM/AtomicArray.java","bug_trace":[{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":129,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":129,"column_number":-1,"description":"access to `this.version`"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"call to Transaction AtomicArray.writeConflict(Transaction)"},{"level":1,"filename":"src/TinyTM/AtomicArray.java","line_number":129,"column_number":-1,"description":"access to `this.version`"}],"key":"AtomicArray.java|writeConflict|THREAD_SAFETY_VIOLATION","hash":"3f9642bda40ef2be4591fbdc5500f84d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEkAAAAIAAAAIgAAABygsAEAgQD/kjtzcmMvVGlueVRNL0F0b21pY0FycmF5LmphdmGgsAEAgQD/kjtzcmMvVGlueVRNL0F0b21pY0FycmF5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Transaction AtomicArray.writeConflict(Transaction)` writes to field `this.writer` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":130,"column":-1,"procedure":"TinyTM.AtomicArray.writeConflict(TinyTM.Transaction):TinyTM.Transaction","procedure_start_line":0,"file":"src/TinyTM/AtomicArray.java","bug_trace":[{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":130,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":130,"column_number":-1,"description":"access to `this.writer`"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"call to Transaction AtomicArray.writeConflict(Transaction)"},{"level":1,"filename":"src/TinyTM/AtomicArray.java","line_number":130,"column_number":-1,"description":"access to `this.writer`"}],"key":"AtomicArray.java|writeConflict|THREAD_SAFETY_VIOLATION","hash":"90c127751ce843d335013763438af95c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEkAAAAIAAAAIgAAABygsAEAggD/kjtzcmMvVGlueVRNL0F0b21pY0FycmF5LmphdmGgsAEAggD/kjtzcmMvVGlueVRNL0F0b21pY0FycmF5LmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Transaction AtomicArray.writeConflict(Transaction)` indirectly writes to field `this.readers.next` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":145,"column":-1,"procedure":"TinyTM.AtomicArray.writeConflict(TinyTM.Transaction):TinyTM.Transaction","procedure_start_line":0,"file":"src/TinyTM/AtomicArray.java","bug_trace":[{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":145,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":145,"column_number":-1,"description":"call to void ReadSet.clear()"},{"level":1,"filename":"src/TinyTM/ReadSet.java","line_number":123,"column_number":-1,"description":"access to `this.readers.next`"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"call to Transaction AtomicArray.writeConflict(Transaction)"},{"level":1,"filename":"src/TinyTM/AtomicArray.java","line_number":145,"column_number":-1,"description":"call to void ReadSet.clear()"},{"level":2,"filename":"src/TinyTM/ReadSet.java","line_number":123,"column_number":-1,"description":"access to `this.readers.next`"}],"key":"AtomicArray.java|writeConflict|THREAD_SAFETY_VIOLATION","hash":"ef9482d3eb2e25294f6ffc73d8e707fa","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAD8AAAAIAAAAIAAAABqgsAB7AP+SN3NyYy9UaW55VE0vUmVhZFNldC5qYXZhoLAAewD/kjdzcmMvVGlueVRNL1JlYWRTZXQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Transaction AtomicArray.writeConflict(Transaction)` reads without synchronization from `this.writer`. Potentially races with write in method `AtomicArray.set(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":137,"column":-1,"procedure":"TinyTM.AtomicArray.writeConflict(TinyTM.Transaction):TinyTM.Transaction","procedure_start_line":0,"file":"src/TinyTM/AtomicArray.java","bug_trace":[{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":137,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":137,"column_number":-1,"description":"access to `this.writer`"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/TinyTM/AtomicArray.java","line_number":71,"column_number":-1,"description":"call to Transaction AtomicArray.writeConflict(Transaction)"},{"level":1,"filename":"src/TinyTM/AtomicArray.java","line_number":130,"column_number":-1,"description":"access to `this.writer`"}],"key":"AtomicArray.java|writeConflict|THREAD_SAFETY_VIOLATION","hash":"cdf53eb631b343a2e3c592b8782961b6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAEkAAAAIAAAAIgAAABygsAEAiQD/kjtzcmMvVGlueVRNL0F0b21pY0FycmF5LmphdmGgsAEAggD/kjtzcmMvVGlueVRNL0F0b21pY0FycmF5LmphdmFA"}]
